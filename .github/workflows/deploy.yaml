name: WishMarket CI with Gradle

on:
  push:
    branches: [ "deploy-ci-cd" ]

# 설정 값
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: wishmarket
  RESOURCE_PATH: ./src/main/resources/application.yaml
  CODE_DEPLOY_APPLICATION_NAME: wishmarket-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: wishmarket-server

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # jdk setting
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application-prod.properties
      - name: make application-prod.properties
        if: contains(github.ref, 'main') # branch가 main 일 때
        run: |
          cd ./src/main/resources  
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
        shell: bash

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test -x ktlintCheck -x ktlintTestSourceSetCheck -x ktlintMainSourceSetCheck -x ktlintKotlinScriptCheck

      ## docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/wishmarket-prod .
          docker push ${{ secrets.DOCKER_REPO }}/wishmarket-prod
          
      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/wishmarket-prod
            sudo docker run -p 8080:8080 ${{ secrets.DOCKER_REPO }}/wishmarket-prod
#            docker-compose up -d
#            docker image prune -f


        # AWS 인증 - IAM 사용자 Access Key, Secret Key
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

#        # 빌드 결과물 S3 버킷에 업로드
#      - name: Upload to S3
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip
#
#        # [6]
#      - name: Code Deploy
#        run: |
#          aws deploy create-deployment \
#          --deployment-config-name CodeDeployDefault.AllAtOnce \
#          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
#          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip
