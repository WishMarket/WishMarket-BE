name: WishMarket CI with Gradle

on:
  push:
    branches: [ "deploy-ci-cd" ]

# 설정 값
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: wishmarket
  RESOURCE_PATH: ./src/main/resources/application.yaml
  CODE_DEPLOY_APPLICATION_NAME: wishmarket-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: wishmarket-server

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # jdk setting
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application-prod.properties
      - name: make application-prod.properties
        if: contains(github.ref, 'main') # branch가 main 일 때
        run: |
          cd ./src/main/resources  
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
        shell: bash

      ## gradle build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build
      #run: ./gradlew build -x test -x ktlintCheck -x ktlintTestSourceSetCheck -x ktlintMainSourceSetCheck -x ktlintKotlinScriptCheck


      ## docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'deploy-ci-cd')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_USERNAME }}/wishmarket-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/wishmarket-prod
          
      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'deploy-ci-cd')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/wishmarket-prod
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/wishmarket-prod
#            docker-compose up -d
#            docker image prune -f